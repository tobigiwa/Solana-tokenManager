// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func MintExtensions() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = backButtonAndTextDirection(
			[]DirectionParams{
				{Direction: "Dashboard", Url: "/"},
				{Direction: "Mint Extensions", Url: "/showMintExtensions"},
				{Direction: "Select Mint Extenisons"},
			},
		).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"grid grid-cols-mintExtensionPage justify-between gap-6 mr-10\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = mainElement().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = asideElement().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n\t\t\t.swiper-slide {\n\t\t\t\twidth: fit-content;\n\t\t\t}\n\t\t\t.color-override {\n            \tbackground-color: #AD6AFF3F;\n        \t}\n\t\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = swipperScript().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func swipperScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n\t\t    const swiper = new Swiper( '#swiper', {\n\t\t        direction: 'horizontal',\n\t\t        slidesPerView: 'auto',\n\t\t        spaceBetween: 8,\n\t\t        mousewheel: true,\n\t\t        autoplay: {\n\t\t            delay: 1000,\n\t\t            disableOnInteraction: false,\n\t\t        },\n\t\t    } );\n\n\t\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func mainElement() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main><article><div class=\"flex flex-col gap-[1.489rem] font-normal\"><p class=\"text-white font-ArchivoSemiCondensed_SemiBold text-[2.25rem] leading-[2.75rem] text-left\">Select Mint extension</p><p class=\"text-[#A3A3A3] text-base tracking-[0.005em] text-left text-wrap\">Select Mint extensions from this list below, and fill the necessary dialogue, so we can create your token22</p></div></article><section class=\"swipers mt-[2.481rem] font-ArchivoSemiCondensed_Thin flex gap-4 justify-between items-center max-w-[40rem]\"><div id=\"swiper\" class=\"swiper\"><div class=\"swiper-wrapper\"><div class=\"swiper-slide p-1\"><div class=\"relative w-fit\"><div class=\"absolute -inset-[0.05rem] rounded-3xl bg-swiperGradient\"></div><button class=\"relative bg-black rounded-3xl\"><p class=\"text-[#EBEBEB] font-medium text-[0.744rem] leading-[0.901rem] text-left py-[1.215rem] px-[2.063rem] rounded-3xl color-override\">Metadata & Metadata pointer extension</p></button></div></div><div class=\"swiper-slide p-1\"><div class=\"relative w-fit\"><div class=\"absolute -inset-[0.05rem] rounded-3xl bg-swiperGradient\"></div><button class=\"relative bg-black rounded-3xl\"><p class=\"text-[#EBEBEB] font-medium text-[0.744rem] leading-[0.901rem] text-left py-[1.215rem] px-[2.063rem] rounded-3xl color-override\">Metadata & Metadata pointer extension2</p></button></div></div><div class=\"swiper-slide p-1\"><div class=\"relative w-fit\"><div class=\"absolute -inset-[0.05rem] rounded-3xl bg-swiperGradient\"></div><button class=\"relative bg-black rounded-3xl\"><p class=\"text-[#EBEBEB] font-medium text-[0.744rem] leading-[0.901rem] text-left py-[1.215rem] px-[2.063rem] rounded-3xl color-override\">Metadata & Metadata pointer extension2</p></button></div></div><div class=\"swiper-slide p-1\"><div class=\"relative w-fit\"><div class=\"absolute -inset-[0.05rem] rounded-3xl bg-swiperGradient\"></div><button class=\"relative bg-black rounded-3xl\"><p class=\"text-[#EBEBEB] font-medium text-[0.744rem] leading-[0.901rem] text-left py-[1.215rem] px-[2.063rem] rounded-3xl color-override\">Metadata & Metadata pointer extension2</p></button></div></div></div></div></section><section class=\"swipers-Btn mt-[1.03rem] mr-[0.263rem] ml-auto flex justify-center items-center gap-[0.6801rem] w-fit\"><button class=\"p-[0.726rem] rounded-full bg-[#FFFFFF4D]\"><img src=\"/assets/svg/ArrowLeft.svg\" alt=\"\" class=\"w-[1.09rem] aspect-square\"></button> <button class=\"p-[0.726rem] rounded-full bg-extensionSwipperButtons\"><img src=\"/assets/svg/ArrowLeft.svg\" alt=\"\" class=\"w-[1.09rem] aspect-square rotate-180\"></button></section><section class=\"basis-[41.875rem] overflow-y-auto h-full mt-[1.503rem] rounded-3xl border-[0.019rem] border-solid border-[#A3A3A3]\"></section></main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func asideElement() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<aside class=\"w-full overflow-y-auto h-[10rem] px-10 mr-10 rounded-2xl border-[0.019rem] border-solid border-[#A3A3A3]\"></aside>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
